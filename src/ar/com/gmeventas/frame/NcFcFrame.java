/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.gmeventas.frame;

import ar.com.gmeventas.entities.Cliente;
import ar.com.gmeventas.entities.Configuracion;
import ar.com.gmeventas.entities.IvaVentas;
import ar.com.gmeventas.entities.Producto;
import ar.com.gmeventas.entities.RenglonFactura;
import ar.com.gmeventas.main.MainFrame;
import ar.com.gmeventas.services.ConfiguracionService;
import ar.com.gmeventas.services.IvaVentasService;
import ar.com.gmeventas.services.RenglonFacturaService;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.LibraryLoader;
import com.jacob.com.Variant;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import static java.lang.Math.rint;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class NcFcFrame extends javax.swing.JFrame {
    
    private Integer vacioLetra = 0;
    private IvaVentas factura = null;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private String sucursalFacturaPapel = "";
    private String letraFacturaPapel;
    private Integer categoriaIva;
    private String tipoComprob;
    private Cliente clienteFactura;
    private String numeroFacturaPapel;
    private Double totalFactura;
    private Double totalGravado;
    private Double totalIva;
    private Double totalImpuesto;
    private String numCae;
    private String vencCae;
    private String texto2Cae;
    private Configuracion config;
    private String letraFactura;
    private Integer sucursalFactura;
    private Integer numeroFactura;
    private Date fecha;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<RenglonFactura> renglonFactura;
    private Producto producto;
    private Integer tst = 1; // en 1 es prueba test

    /**
     * Creates new form NcFcFrame
     */
    public NcFcFrame() {
        initComponents();
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        letraTxt = new javax.swing.JTextField();
        numeroTxt = new javax.swing.JTextField();
        traerBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        netoGravadoTxt = new javax.swing.JTextField();
        impuestoTxt = new javax.swing.JTextField();
        ivaTxt = new javax.swing.JTextField();
        totalTxt = new javax.swing.JTextField();
        crearNcBtn = new javax.swing.JButton();
        reFacturarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Nc y Re-Facturar");

        jLabel1.setText("Letra Factura:");

        jLabel3.setText("NÃºmero Factura:");

        letraTxt.setText("LET");
        letraTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                letraTxtKeyPressed(evt);
            }
        });

        numeroTxt.setText("NUMERO");
        numeroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numeroTxtKeyPressed(evt);
            }
        });

        traerBtn.setText("Traer");
        traerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traerBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Neto Gravado:");

        jLabel5.setText("Impuesto:");

        jLabel6.setText("Iva:");

        jLabel7.setText("Total:");

        netoGravadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        netoGravadoTxt.setText("NG");

        impuestoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        impuestoTxt.setText("IMP");

        ivaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ivaTxt.setText("IVA");

        totalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalTxt.setText("TOTAL");

        crearNcBtn.setText("Crear Nc");
        crearNcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearNcBtnActionPerformed(evt);
            }
        });

        reFacturarBtn.setText("Re Facturar");
        reFacturarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reFacturarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numeroTxt)
                                .addGap(56, 56, 56))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(totalTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                    .addComponent(ivaTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(impuestoTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(netoGravadoTxt, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(36, 36, 36)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(crearNcBtn)
                            .addComponent(traerBtn)
                            .addComponent(reFacturarBtn)
                            .addComponent(volverBtn))
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(letraTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(214, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(letraTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(numeroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(traerBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(netoGravadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(impuestoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ivaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crearNcBtn))
                .addGap(18, 18, 18)
                .addComponent(reFacturarBtn)
                .addGap(18, 18, 18)
                .addComponent(volverBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void traerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traerBtnActionPerformed
        traerFc();
    }//GEN-LAST:event_traerBtnActionPerformed

    private void crearNcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearNcBtnActionPerformed
        crearNc();
    }//GEN-LAST:event_crearNcBtnActionPerformed

    private void reFacturarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reFacturarBtnActionPerformed
        reFacturar();
    }//GEN-LAST:event_reFacturarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void letraTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_letraTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (letraTxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Solo ingrese A o B");
                letraTxt.setText("");
                vacioLetra = 0;
                letraTxt.requestFocus();
                return;
            }
            numeroTxt.requestFocus();
            return;
        }
        if (vacioLetra != 1) {
            if (evt.getKeyCode() != 65) {
                if (evt.getKeyCode() != 66) {
                    JOptionPane.showMessageDialog(this, "Solo ingrese A o B");
                    letraTxt.setText("");
                    vacioLetra = 0;
                    letraTxt.requestFocus();
                    return;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Solo puede ingresar una letra");
            letraTxt.setText("");
            vacioLetra = 0;
            letraTxt.requestFocus();
            return;
        }
        vacioLetra = 1;
    }//GEN-LAST:event_letraTxtKeyPressed

    private void numeroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            traerFc();
        }
    }//GEN-LAST:event_numeroTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NcFcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NcFcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NcFcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NcFcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NcFcFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton crearNcBtn;
    private javax.swing.JTextField impuestoTxt;
    private javax.swing.JTextField ivaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField letraTxt;
    private javax.swing.JTextField netoGravadoTxt;
    private javax.swing.JTextField numeroTxt;
    private javax.swing.JButton reFacturarBtn;
    private javax.swing.JTextField totalTxt;
    private javax.swing.JButton traerBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
    
    private void reFacturar() {
        renglonFactura = null;
        try {
            renglonFactura = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(factura);
        } catch (Exception ex) {
            Logger.getLogger(NcFcFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (renglonFactura != null && !renglonFactura.isEmpty()) {
            totalFactura = 0.00;
            totalImpuesto = 0.00;
            totalGravado = 0.00;
            totalIva = 0.00;
            for (RenglonFactura rf : renglonFactura) {
                totalFactura += rf.getTotal();
                totalImpuesto += rf.getImpuesto();
            }
            Double gravadoConIva = totalFactura - totalImpuesto;
            Double gravado = gravadoConIva / 1.21;
            Double iva = gravadoConIva - gravado;
            totalGravado = gravado;
            totalIva = iva;
//            System.out.println(totalGravado);
//            System.out.println(totalImpuesto);
//            System.out.println(totalIva);
//            System.out.println(totalFactura);
            // presentacion web
            sucursalFacturaPapel = "0";
            categoriaIva = factura.getCliente().getCategoriaDeIva();
            /*
            try {
                LibraryLoader.loadJacobLibrary();
                ActiveXComponent wsaa = new ActiveXComponent("WSAA");

                String wsdl = "https://wsaa.afip.gov.ar/ws/services/LoginCms";
                String userdir = "c:/certifgolo";
                Dispatch.call(wsaa, "Autenticar",
                        new Variant("wsfe"),
                        new Variant(userdir + "/ProducionGolosol_40e50659036c5ecf.crt"),
                        new Variant(userdir + "/clave_privada_30709520748_201604071554.key"),
                        new Variant(wsdl));
                String excepcion = Dispatch.get(wsaa, "Excepcion").toString();
                String token = Dispatch.get(wsaa, "Token").toString();
                String sign = Dispatch.get(wsaa, "Sign").toString();
                ActiveXComponent wsfev1 = new ActiveXComponent("WSFEv1");
                Dispatch.put(wsfev1, "Cuit", new Variant("30709520748"));
                Dispatch.put(wsfev1, "Token", new Variant(token));
                Dispatch.put(wsfev1, "Sign", new Variant(sign));
                String cache = "";
                wsdl = "https://servicios1.afip.gov.ar/wsfev1/service.asmx?WSDL";
                Dispatch.call(wsfev1, "Conectar",
                        new Variant(cache),
                        new Variant(wsdl)
                );
                String tipo_cbte = "1";
                if (categoriaIva.equals(1)) {
                    tipo_cbte = "1"; //Fc A
                    letraFacturaPapel = "A";
                } else {
                    tipo_cbte = "6"; //Fc B
                    letraFacturaPapel = "B";
                }
                tipoComprob = tipo_cbte;
                String pto_vta = "3"; // Sucursal declarada WS
                sucursalFacturaPapel = "0003";
                Variant ult = Dispatch.call(wsfev1, "CompUltimoAutorizado",
                        new Variant(tipo_cbte),
                        new Variant(pto_vta));
                excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
                JOptionPane.showMessageDialog(this, "Ult.Comprb." + ult.toString());
                String fechaWs = new SimpleDateFormat("yyyyMMdd").format(new Date());
                String concepto = "1";// producto 
                String cui = clienteFactura.getCuit();
                String cuit1 = cui.substring(0, 2) + cui.substring(3, 11) + cui.substring(12, 13);
                String tipoD = clienteFactura.getTipo();
                String tipo_doc = tipoD, nro_doc = cuit1; //tipo y numero
                int cbte_nro = Integer.parseInt(ult.toString()) + 1,
                        cbt_desde = cbte_nro,
                        cbt_hasta = cbte_nro;
                numeroFacturaPapel = String.valueOf(cbte_nro);
                int largo = ("00000000" + numeroFacturaPapel).length();
                numeroFacturaPapel = ("00000000" + numeroFacturaPapel).substring(largo - 8, largo);
                String imp_total = df.format(totalFactura).toString().replaceAll("\\,", "\\.");//"124.00";
                String imp_tot_conc = "0.00";
                String imp_neto = df.format(totalGravado).toString().replaceAll("\\,", "\\.");
                String imp_iva = df.format(totalIva).toString().replaceAll("\\,", "\\.");//"21.00"
                int internos = 0;
                if (totalImpuesto != 0.00) {
                    internos = (int) rint(totalImpuesto * 100);
                }
                String imp_trib = "", imp_op_ex = "0.00";
                if (internos > 0) {
                    imp_trib = df.format(totalImpuesto).toString().replaceAll("\\,", "\\.");
                } else {
                    imp_trib = "0.00";
                }
                String fecha_cbte = fechaWs, fecha_venc_pago = "";
                String fecha_serv_desde = "", fecha_serv_hasta = "";
                String moneda_id = "PES", moneda_ctz = "1.000";
                Variant ok = Dispatch.call(wsfev1, "CrearFactura",
                        new Variant(concepto), new Variant(tipo_doc),
                        new Variant(nro_doc), new Variant(tipo_cbte),
                        new Variant(pto_vta),
                        new Variant(cbt_desde), new Variant(cbt_hasta),
                        new Variant(imp_total), new Variant(imp_tot_conc),
                        new Variant(imp_neto), new Variant(imp_iva),
                        new Variant(imp_trib), new Variant(imp_op_ex),
                        new Variant(fecha_cbte), new Variant(fecha_venc_pago),
                        new Variant(fecha_serv_desde), new Variant(fecha_serv_hasta),
                        new Variant(moneda_id), new Variant(moneda_ctz));
                if (internos > 0) {
                    Variant tributo_id = new Variant(4),
                            tributo_desc = new Variant("Impuestos internos"),
                            tributo_base_imp = new Variant("0.00"),
                            tributo_alic = new Variant("0.00"),
                            tributo_importe = new Variant(df.format(totalImpuesto).toString().replaceAll("\\,", "\\."));
                    Dispatch.call(wsfev1, "AgregarTributo",
                            tributo_id, tributo_desc, tributo_base_imp,
                            tributo_alic, tributo_importe);
                }
                Variant iva_id = new Variant(5),
                        iva_base_imp = new Variant(df.format(totalGravado).toString().replaceAll("\\,", "\\.")),
                        iva_importe = new Variant(df.format(totalIva).toString().replaceAll("\\,", "\\."));
                Dispatch.call(wsfev1, "AgregarIva",
                        iva_id, iva_base_imp, iva_importe);
                Dispatch.put(wsfev1, "Reprocesar", new Variant(false));
                Variant cae = Dispatch.call(wsfev1, "CAESolicitar");
                String requ = Dispatch.get(wsfev1, "XmlRequest").toString();
                String resp = Dispatch.get(wsfev1, "XmlResponse").toString();
                excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
                String errmsg = Dispatch.get(wsfev1, "ErrMsg").toString();
                String obs = Dispatch.get(wsfev1, "Obs").toString();
                String vto = Dispatch.get(wsfev1, "Vencimiento").toString();
                String resultado = Dispatch.get(wsfev1, "Resultado").toString();
                numCae = cae.toString();
                if (!resultado.equals("A")) {
                    JOptionPane.showMessageDialog(this, "Obs: " + obs + "\nError: " + errmsg);
                    return;
                }
                if (vto != "" && vto != null) {
                    vencCae = vto.substring(6, 8) + "/" + vto.substring(4, 6) + "/" + vto.substring(0, 4);
                }
                numCae = cae.toString();
                String ruta1 = "c:/comprobantes/" + tipoComprob
                        + letraFacturaPapel + sucursalFacturaPapel
                        + numeroFacturaPapel + ".xm1";
                String ruta2 = "c:/comprobantes/" + tipoComprob
                        + letraFacturaPapel + sucursalFacturaPapel
                        + numeroFacturaPapel + ".xm2";
                File archivo1 = new File(ruta1);
                File archivo2 = new File(ruta2);
                BufferedWriter bw1, bw2;
                bw1 = new BufferedWriter(new FileWriter(archivo1));
                bw2 = new BufferedWriter(new FileWriter(archivo2));
                bw1.write(requ);
                bw2.write(resp);
                bw1.close();
                bw2.close();
                int x = 0;
                Integer suma1 = 0;
                Integer suma2 = 0;
                String cadena = cuit1 + "0" + tipo_cbte + "0003" + cae + vto;
                for (int i = 0; i < 39; i++) {
                    if (x == 0) {
                        int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                        suma1 += num;
                        x = 1;
                    } else {
                        int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                        suma2 += num;
                        x = 0;
                    }
                }
                suma1 = suma1 * 3;
                int total = suma1 + suma2;
                int dv = (int) (rint(total / 10 + .9) * 10);
                dv = dv - total;
                cadena += String.valueOf(dv);
                String txtCadenaRP = "";
                for (int i = 0; i < 40; i = i + 2) {
                    String charNum = cadena.substring(i, i + 2);
                    int numChar = Integer.valueOf(charNum);
                    if (numChar < 50) {
                        numChar += 48;
                    } else {
                        numChar += 142;
                    }
                    char c = (char) numChar;
                    txtCadenaRP = txtCadenaRP + c;
                }
                txtCadenaRP = (char) 40 + txtCadenaRP + (char) 41;
                texto2Cae = txtCadenaRP;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
                e.printStackTrace();
                return;
            }
             */
            // fin presentacion web
            IvaVentas ivaVentas = new IvaVentas();
            Long id = (long) 1;
            try {
                config = new ConfiguracionService().getFacturas(id);
            } catch (Exception ex) {
                Logger.getLogger(NotaCreditoWebFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 1671");
            }
            if (categoriaIva.equals(1) || categoriaIva.equals(2)) {
                letraFactura = "A";
                // es inscriptp
                sucursalFactura = config.getSucursalA();
                numeroFactura = config.getNumeroFacturaA();
                numeroFactura += 0;
                config.setNumeroFacturaA(numeroFactura);
                try {
                    new ConfiguracionService().updateConfiguracion(config);
                } catch (Exception ex) {
                    Logger.getLogger(NotaCreditoWebFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 1685");
                }
            } else {
                letraFactura = "B";
                // el resto de las categorias
                sucursalFactura = config.getSucursalB();
                numeroFactura = config.getNumeroFacturaB();
                numeroFactura += 0;
                config.setNumeroFacturaB(numeroFactura);
                try {
                    new ConfiguracionService().updateConfiguracion(config);
                } catch (Exception ex) {
                    Logger.getLogger(NotaCreditoWebFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 599");
                }
            }
            ivaVentas.setCliente(clienteFactura);
            ivaVentas.setDescuentoGlobal(0.0);
            ivaVentas.setExento(0.0);
            ivaVentas.setFecha(fecha);
            try {
                ivaVentas.setFechaCae(sdf.parse(vencCae));
            } catch (ParseException ex) {
                ivaVentas.setFechaCae(fecha);
            }
            ivaVentas.setFecha(new Date());
            ivaVentas.setCae(Long.valueOf(numCae));
            ivaVentas.setGravado(totalGravado);
            ivaVentas.setImpuesto(totalImpuesto);
            ivaVentas.setIva(totalIva);
            ivaVentas.setNoGravado(0.0);
            ivaVentas.setTotal(totalFactura);
            ivaVentas.setLetra(letraFacturaPapel);
            ivaVentas.setNumeroSucursal(Integer.valueOf(sucursalFacturaPapel));
            ivaVentas.setNumeroFactura(Integer.valueOf(numeroFacturaPapel));
            try {
                new IvaVentasService().saveIvaVentas(ivaVentas);
            } catch (Exception ex) {
                Logger.getLogger(NcFcFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 623");
            }
            for (RenglonFactura reF : renglonFactura) {
                reF.setIvaVentas(ivaVentas);
                try {
                    new RenglonFacturaService().saveRenglon(reF);
                } catch (Exception ex) {
                    Logger.getLogger(NcFcFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        JOptionPane.showMessageDialog(this, "Factura Generada Correctamente");
        limpiarCampos();
    }
    
    private void traerFc() {
        factura = null;
        String letra = letraTxt.getText();
        Integer numero = Integer.valueOf(numeroTxt.getText());
        try {
            factura = new IvaVentasService().getFacturaByLetraNumero(letra, numero);
        } catch (Exception ex) {
            Logger.getLogger(NcFcFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
//        System.out.println(factura);
        if (factura != null) {
            netoGravadoTxt.setText(df.format(factura.getGravado()));
            impuestoTxt.setText(df.format(factura.getImpuesto()));
            ivaTxt.setText(df.format(factura.getIva()));
            totalTxt.setText(df.format(factura.getTotal()));
            clienteFactura = factura.getCliente();
            totalFactura = factura.getTotal();
            totalGravado = factura.getGravado();
            totalIva = factura.getIva();
            totalImpuesto = factura.getImpuesto();
        }
    }
    
    private void crearNc() {
        if (factura != null) {
            // presentacion web
            sucursalFacturaPapel = "0";
            categoriaIva = factura.getCliente().getCategoriaDeIva();
            if (tst == 0) {
                try {
                    LibraryLoader.loadJacobLibrary();
                    ActiveXComponent wsaa = new ActiveXComponent("WSAA");
                    
                    String wsdl = "https://wsaa.afip.gov.ar/ws/services/LoginCms";
                    String userdir = "c:/certifgolo";
                    Dispatch.call(wsaa, "Autenticar",
                            new Variant("wsfe"),
                            new Variant(userdir + "/nuevo2020_795b6631abd56620.crt"),
                            new Variant(userdir + "/clave_privada_30709520748_202010302353.key"),
                            /*
                            new Variant(userdir + "/ProducionGolosol_40e50659036c5ecf.crt"),
                            new Variant(userdir + "/clave_privada_30709520748_201604071554.key"),
                            */
                            new Variant(wsdl));
                    String excepcion = Dispatch.get(wsaa, "Excepcion").toString();
                    String token = Dispatch.get(wsaa, "Token").toString();
                    String sign = Dispatch.get(wsaa, "Sign").toString();
                    ActiveXComponent wsfev1 = new ActiveXComponent("WSFEv1");
                    Dispatch.put(wsfev1, "Cuit", new Variant("30709520748"));
                    Dispatch.put(wsfev1, "Token", new Variant(token));
                    Dispatch.put(wsfev1, "Sign", new Variant(sign));
                    String cache = "";
                    wsdl = "https://servicios1.afip.gov.ar/wsfev1/service.asmx?WSDL";
                    Dispatch.call(wsfev1, "Conectar",
                            new Variant(cache),
                            new Variant(wsdl)
                    );
                    String tipo_cbte = "1";
                    if (categoriaIva.equals(1) || categoriaIva.equals(2)) {
                        tipo_cbte = "3"; //Nota Credito A
                        letraFacturaPapel = "A";
                    } else {
                        tipo_cbte = "8"; //Nota Credito B
                        letraFacturaPapel = "B";
                    }
                    tipoComprob = tipo_cbte;
                    String pto_vta = "3"; // Sucursal declarada WS
                    sucursalFacturaPapel = "0003";
                    Variant ult = Dispatch.call(wsfev1, "CompUltimoAutorizado",
                            new Variant(tipo_cbte),
                            new Variant(pto_vta));
                    excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
                    JOptionPane.showMessageDialog(this, "Ult.Comprb." + ult.toString());
                    String fechaWs = new SimpleDateFormat("yyyyMMdd").format(new Date());
                    String concepto = "1";// producto 
                    String cui = clienteFactura.getCuit();
                    String cuit1 = cui.substring(0, 2) + cui.substring(3, 11) + cui.substring(12, 13);
                    String tipoD = clienteFactura.getTipo();
                    String tipo_doc = tipoD, nro_doc = cuit1; //tipo y numero
                    int cbte_nro = Integer.parseInt(ult.toString()) + 1,
                            cbt_desde = cbte_nro,
                            cbt_hasta = cbte_nro;
                    numeroFacturaPapel = String.valueOf(cbte_nro);
                    int largo = ("00000000" + numeroFacturaPapel).length();
                    numeroFacturaPapel = ("00000000" + numeroFacturaPapel).substring(largo - 8, largo);
                    String imp_total = df.format(totalFactura).toString().replaceAll("\\,", "\\.");//"124.00";
                    String imp_tot_conc = "0.00";
                    String imp_neto = df.format(totalGravado).toString().replaceAll("\\,", "\\.");
                    String imp_iva = df.format(totalIva).toString().replaceAll("\\,", "\\.");//"21.00"
                    int internos = 0;
                    if (totalImpuesto != 0.00) {
                        internos = (int) rint(totalImpuesto * 100);
                    }
                    String imp_trib = "", imp_op_ex = "0.00";
                    if (internos > 0) {
                        imp_trib = df.format(totalImpuesto).toString().replaceAll("\\,", "\\.");
                    } else {
                        imp_trib = "0.00";
                    }
                    String fecha_cbte = fechaWs, fecha_venc_pago = "";
                    String fecha_serv_desde = "", fecha_serv_hasta = "";
                    String moneda_id = "PES", moneda_ctz = "1.000";
                    Variant ok = Dispatch.call(wsfev1, "CrearFactura",
                            new Variant(concepto), new Variant(tipo_doc),
                            new Variant(nro_doc), new Variant(tipo_cbte),
                            new Variant(pto_vta),
                            new Variant(cbt_desde), new Variant(cbt_hasta),
                            new Variant(imp_total), new Variant(imp_tot_conc),
                            new Variant(imp_neto), new Variant(imp_iva),
                            new Variant(imp_trib), new Variant(imp_op_ex),
                            new Variant(fecha_cbte), new Variant(fecha_venc_pago),
                            new Variant(fecha_serv_desde), new Variant(fecha_serv_hasta),
                            new Variant(moneda_id), new Variant(moneda_ctz));
                    if (internos > 0) {
                        Variant tributo_id = new Variant(4),
                                tributo_desc = new Variant("Impuestos internos"),
                                tributo_base_imp = new Variant("0.00"),
                                tributo_alic = new Variant("0.00"),
                                tributo_importe = new Variant(df.format(totalImpuesto).toString().replaceAll("\\,", "\\."));
                        Dispatch.call(wsfev1, "AgregarTributo",
                                tributo_id, tributo_desc, tributo_base_imp,
                                tributo_alic, tributo_importe);
                    }
                    
                    Variant iva_id = new Variant(5),
                            iva_base_imp = new Variant(df.format(totalGravado).toString().replaceAll("\\,", "\\.")),
                            iva_importe = new Variant(df.format(totalIva).toString().replaceAll("\\,", "\\."));
                    Dispatch.call(wsfev1, "AgregarIva",
                            iva_id, iva_base_imp, iva_importe);
                    Dispatch.put(wsfev1, "Reprocesar", new Variant(false));
                    Variant cae = Dispatch.call(wsfev1, "CAESolicitar");
                    String requ = Dispatch.get(wsfev1, "XmlRequest").toString();
                    String resp = Dispatch.get(wsfev1, "XmlResponse").toString();
                    excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
                    String errmsg = Dispatch.get(wsfev1, "ErrMsg").toString();
                    String obs = Dispatch.get(wsfev1, "Obs").toString();
                    String vto = Dispatch.get(wsfev1, "Vencimiento").toString();
                    String resultado = Dispatch.get(wsfev1, "Resultado").toString();
                    numCae = cae.toString();
                    if (!resultado.equals("A")) {
                        JOptionPane.showMessageDialog(this, "Obs: " + obs + "\nError: " + errmsg);
                        return;
                    }
                    if (vto != "" && vto != null) {
                        vencCae = vto.substring(6, 8) + "/" + vto.substring(4, 6) + "/" + vto.substring(0, 4);
                    }
                    numCae = cae.toString();
                    String ruta1 = "c:/comprobantes/" + tipoComprob
                            + letraFacturaPapel + sucursalFacturaPapel
                            + numeroFacturaPapel + ".xm1";
                    String ruta2 = "c:/comprobantes/" + tipoComprob
                            + letraFacturaPapel + sucursalFacturaPapel
                            + numeroFacturaPapel + ".xm2";
                    File archivo1 = new File(ruta1);
                    File archivo2 = new File(ruta2);
                    BufferedWriter bw1, bw2;
                    bw1 = new BufferedWriter(new FileWriter(archivo1));
                    bw2 = new BufferedWriter(new FileWriter(archivo2));
                    bw1.write(requ);
                    bw2.write(resp);
                    bw1.close();
                    bw2.close();
                    int x = 0;
                    Integer suma1 = 0;
                    Integer suma2 = 0;
                    String cadena = cuit1 + "0" + tipo_cbte + "0003" + cae + vto;
                    for (int i = 0; i < 39; i++) {
                        if (x == 0) {
                            int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                            suma1 += num;
                            x = 1;
                        } else {
                            int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                            suma2 += num;
                            x = 0;
                        }
                    }
                    suma1 = suma1 * 3;
                    int total = suma1 + suma2;
                    int dv = (int) (rint(total / 10 + .9) * 10);
                    dv = dv - total;
                    cadena += String.valueOf(dv);
                    String txtCadenaRP = "";
                    for (int i = 0; i < 40; i = i + 2) {
                        String charNum = cadena.substring(i, i + 2);
                        int numChar = Integer.valueOf(charNum);
                        if (numChar < 50) {
                            numChar += 48;
                        } else {
                            numChar += 142;
                        }
                        char c = (char) numChar;
                        txtCadenaRP = txtCadenaRP + c;
                    }
                    txtCadenaRP = (char) 40 + txtCadenaRP + (char) 41;
                    texto2Cae = txtCadenaRP;
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e);
                    e.printStackTrace();
                    return;
                }
            }
            // fin presentacion web
            IvaVentas ivaVentas = new IvaVentas();
            Long id = (long) 1;
            try {
                config = new ConfiguracionService().getFacturas(id);
            } catch (Exception ex) {
                Logger.getLogger(NotaCreditoWebFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 1671");
            }
            if (categoriaIva.equals(1) || categoriaIva.equals(2)) {
                letraFactura = "A";
                // es inscriptp
                sucursalFactura = config.getSucursalA();
                numeroFactura = config.getNumeroFacturaA();
                numeroFactura += 0;
                config.setNumeroFacturaA(numeroFactura);
                try {
                    new ConfiguracionService().updateConfiguracion(config);
                } catch (Exception ex) {
                    Logger.getLogger(NotaCreditoWebFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 1685");
                }
            } else {
                letraFactura = "B";
                // el resto de las categorias
                sucursalFactura = config.getSucursalB();
                numeroFactura = config.getNumeroFacturaB();
                numeroFactura += 0;
                config.setNumeroFacturaB(numeroFactura);
                try {
                    new ConfiguracionService().updateConfiguracion(config);
                } catch (Exception ex) {
                    Logger.getLogger(NotaCreditoWebFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 599");
                }
            }
            ivaVentas.setCliente(clienteFactura);
            ivaVentas.setDescuentoGlobal(0.0);
            ivaVentas.setExento(0.0);
            ivaVentas.setFecha(fecha);
            if (vencCae != null) {
                try {
                    ivaVentas.setFechaCae(sdf.parse(vencCae));
                } catch (ParseException ex) {
                    ivaVentas.setFechaCae(fecha);
                }
            } else {
                ivaVentas.setFechaCae(new Date());
                numCae = "0";
                numeroFacturaPapel="22";
            }
            ivaVentas.setFecha(new Date());
            ivaVentas.setCae(Long.valueOf(numCae));
            ivaVentas.setGravado(-totalGravado);
            ivaVentas.setImpuesto(-totalImpuesto);
            ivaVentas.setIva(-totalIva);
            ivaVentas.setNoGravado(0.0);
            ivaVentas.setTotal(-totalFactura);
            ivaVentas.setLetra(letraFacturaPapel);
            ivaVentas.setNumeroSucursal(Integer.valueOf(sucursalFacturaPapel));
            ivaVentas.setNumeroFactura(Integer.valueOf(numeroFacturaPapel));
            ivaVentas.setLetraReferencia(factura.getLetra());
            ivaVentas.setNumeroSucursalReferencia(factura.getNumeroSucursal());
            ivaVentas.setNumeroFacturaReferencia(factura.getNumeroFactura());
            try {
                new IvaVentasService().saveIvaVentas(ivaVentas);
            } catch (Exception ex) {
                Logger.getLogger(NcFcFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 623");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se puede generar NC");
            limpiarCampos();
            return;
        }
        JOptionPane.showMessageDialog(this, "Nc generada");
        limpiarCampos();
    }
    
    private void limpiarCampos() {
        letraTxt.setText("");
        numeroTxt.setText("");
        netoGravadoTxt.setText("");
        impuestoTxt.setText("");
        ivaTxt.setText("");
        totalTxt.setText("");
        letraTxt.requestFocus();
    }
}
