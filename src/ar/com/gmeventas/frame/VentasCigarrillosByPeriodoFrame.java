/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.gmeventas.frame;

import ar.com.gmeventas.entities.IvaVentas;
import ar.com.gmeventas.entities.RenglonFactura;
import ar.com.gmeventas.entities.Rubro;
import ar.com.gmeventas.main.MainFrame;
import ar.com.gmeventas.services.RenglonFacturaService;
import ar.com.gmeventas.services.RubroService;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class VentasCigarrillosByPeriodoFrame extends javax.swing.JFrame {

    private List<RenglonFactura> renglones = null;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");

    /**
     * Creates new form VentasCigarrillosByPeriodoFrame
     */
    public VentasCigarrillosByPeriodoFrame() {
        initComponents();
        limpiarCampos();
        limpiarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        alTxt = new javax.swing.JTextField();
        BuscarBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("COMPARATIVA COMPRA VENTA");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rubro", "Venta Gravado Total", "Venta Impuesto Total", "Cpr Gravado Total", "Cpr Impuesto Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel1.setText("De:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("al:");

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("AL");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        BuscarBtn.setText("Buscar");
        BuscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BuscarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(jLabel1)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuscarBtn)
                    .addComponent(excelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (deTxt.getText().isEmpty()) {
                deTxt.setText(sdf.format(new Date()));
                deTxt.requestFocus();
            } else {
                int largo = deTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    deTxt.setText(deTxt.getText() + "/" + f);
                    deTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        deTxt.setText(deTxt.getText() + an);
                        deTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            deTxt.setText("");
//                          request focus mismo campo
                            deTxt.requestFocus();
                        } else {
                            String veinte = deTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃ‘O");
//                              request focus mismo campo
                                deTxt.requestFocus();
                            } else {
                                alTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (alTxt.getText().isEmpty()) {
                alTxt.setText(sdf.format(new Date()));
                alTxt.requestFocus();
            } else {
                int largo = alTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    alTxt.setText(alTxt.getText() + "/" + f);
                    alTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        alTxt.setText(alTxt.getText() + an);
                        alTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            alTxt.setText("");
//                          request focus mismo campo
                            alTxt.requestFocus();
                        } else {
                            String veinte = alTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃ‘O");
//                              request focus mismo campo
                                alTxt.requestFocus();
                            } else {
                                buscar();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void BuscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_BuscarBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentasCigarrillosByPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentasCigarrillosByPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentasCigarrillosByPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentasCigarrillosByPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentasCigarrillosByPeriodoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuscarBtn;
    private javax.swing.JTextField alTxt;
    private javax.swing.JTextField deTxt;
    private javax.swing.JButton excelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void buscar() {
        int l1 = deTxt.getText().length();
        if (l1 != 10) {
            JOptionPane.showMessageDialog(this, "Error en Fecha");
            deTxt.requestFocus();
            return;
        }
        int l2 = alTxt.getText().length();
        if (l2 != 10) {
            JOptionPane.showMessageDialog(this, "Error en Fecha");
            alTxt.requestFocus();
            return;
        }
        Date d1 = new Date();
        Date d2 = new Date();
        try {
            d1 = sdf.parse(deTxt.getText());
            d2 = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(VentasCigarrillosByPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        renglones = null;
        try {
            renglones = new RenglonFacturaService().getRenglonesEntreFechas(d1, d2);
        } catch (Exception ex) {
            Logger.getLogger(VentasCigarrillosByPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (renglones != null && !renglones.isEmpty()) {
            int rows = 0;
            List<Rubro> rubros = null;
            try {
                rubros = new RubroService().getAllRubros();
            } catch (Exception ex) {
                Logger.getLogger(VentasCigarrillosByPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (rubros != null && !rubros.isEmpty()) {
                int i = 0;
                rows = rubros.size();
                Object ob[] = new Object[rows];
                for (Rubro ru : rubros) {
                    ob[i] = ru.getId();
                    i += 1;
                }
                Double dp0[] = new Double[rows];
                Double dp1[] = new Double[rows];
                Double dp2[] = new Double[rows];
                Double dp3[] = new Double[rows];
                for (int y = 0; y < rows; y++) {
                    dp0[y] = 0.0;
                    dp1[y] = 0.0;
                    dp2[y] = 0.0;
                    dp3[y] = 0.0;
                }
                for (RenglonFactura r : renglones) {
                    Rubro rub = r.getProducto().getRubro();
                    Long ids = rub.getId() - 1;
                    dp0[ids.intValue()] += r.getGravado();
                    dp1[ids.intValue()] += r.getImpuesto();
                    if (r.getCostoG() != null) {
                        dp2[ids.intValue()] += r.getCostoG();
                    }
                    if (r.getCostoI() != null) {
                        dp3[ids.intValue()] += r.getCostoI();
                    }
                }
                DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
                Double t1 = 0.0;
                Double t2 = 0.0;
                Double t3 = 0.0;
                Double t4 = 0.0;
                for (int y = 0; y < rows; y++) {
                    Object obt[] = new Object[5];
                    obt[0] = rubros.get(y).getNombre();
                    obt[1] = df.format(dp0[y]);
                    obt[2] = df.format(dp1[y]);
                    obt[3] = df.format(dp2[y]);
                    obt[4] = df.format(dp3[y]);
                    t1 += dp0[y].doubleValue();
                    t2 += dp1[y].doubleValue();
                    t3 += dp2[y].doubleValue();
                    t4 += dp3[y].doubleValue();
                    tbl.addRow(obt);
                }
                Object obt[] = new Object[5];
                Object obt2[] = new Object[5];
                obt2[0] = "";
                tbl.addRow(obt2);
                obt[0] = "TOTALES ->";
                obt[1] = df.format(t1);
                obt[2] = df.format(t2);
                obt[3] = df.format(t3);
                obt[4] = df.format(t4);
                tbl.addRow(obt);
                tabla.setModel(tbl);
            }
        }
    }

    private void excel() {
        String rutaArchivo = "c:/exceliva/comparativa.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("Comparativa Compras Ventas", 0);
        List<IvaVentas> facturas = null;
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Golosol Comparatva Compras Ventas"));
            hoja1.addCell(new jxl.write.Label(0, 1, "Fecha " + deTxt.getText() + " al " + alTxt.getText()));
            hoja1.addCell(new jxl.write.Label(0, 2, "Rubro"));
            hoja1.addCell(new jxl.write.Label(1, 2, "Venta Gravado Total"));
            hoja1.addCell(new jxl.write.Label(2, 2, "Venta Impuesto Total"));
            hoja1.addCell(new jxl.write.Label(3, 2, "Compra Gravado Total"));
            hoja1.addCell(new jxl.write.Label(4, 2, "Compra Impuesto Total"));
            for (int y = 3; y < 8; y++) {
                for (int i = 0; i < 5; i++) {
                    if (i > 0) {
                        Double dd = Double.valueOf(tabla.getValueAt(y - 3, i).toString().replace(",", "."));
                        hoja1.addCell(new jxl.write.Number(i, y, dd));
                    } else {
                        hoja1.addCell(new jxl.write.Label(i, y, tabla.getValueAt(y - 3, i).toString()));
                    }
                    //y += 1;
                }
            }
            int y = 9;
            for (int i = 0; i < 5; i++) {
                if (i > 0) {
                    Double dd = Double.valueOf(tabla.getValueAt(y - 3, i).toString().replace(",", "."));
                    hoja1.addCell(new jxl.write.Number(i, y, dd));
                } else {
                    hoja1.addCell(new jxl.write.Label(i, y, tabla.getValueAt(y - 3, i).toString()));
                }
                //y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 478");
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 264");
        }
        JOptionPane.showMessageDialog(this, "Libro Iva creado correctamente");
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void limpiarCampos() {
        deTxt.setText("");
        alTxt.setText("");
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int x = 0; x < rows; x++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }
}
